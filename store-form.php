<?php
/**
 * Zpracov√°n√≠ formul√°≈ôe dotaƒçn√≠ho kalkul√°toru
 * P≈ôij√≠m√° data z formul√°≈ôe a vrac√≠ v√Ωsledky od OpenAI asistenta
 */

// HTTP hlaviƒçky
header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: GET, POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type, Authorization');

// Zpracov√°n√≠ OPTIONS po≈æadavku (preflight)
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit();
}

// Pouze POST metoda je povolen√°
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['error' => 'Method not allowed']);
    exit();
}

// Naƒçten√≠ konfigurace a datab√°zov√© t≈ô√≠dy
$config = require_once 'config.php';
require_once 'database_handler.php';

// Z√≠sk√°n√≠ konfigurac√≠
$db_config = $config['database'];
$openai_api_key = $config['openai']['api_key'];
$assistant_id = $config['openai']['assistant_id'];

// Glob√°ln√≠ promƒõnn√© pro logov√°n√≠
$db_connection = null;
$current_zadost_id = null;

try {
    // Inicializace datab√°ze
    $db_handler = new DotacniKalkulatorDB($db_config);
    $db_connection = $db_handler->getPDO();
} catch (Exception $e) {
    error_log("Chyba p≈ôipojen√≠ k datab√°zi: " . $e->getMessage());
}

// Funkce pro logov√°n√≠ OpenAI komunikace
function logOpenAIRequest($url, $request_data, $response_data, $thread_id = null, $run_id = null, $status = 'success', $duration = null) {
    global $db_connection, $current_zadost_id;
    
    if (!$db_connection) {
        error_log("Datab√°ze nen√≠ dostupn√° pro logov√°n√≠ OpenAI");
        return;
    }
    
    try {
        // Z√≠sk√°n√≠ IP adresy a User Agent
        $ip_address = getClientIP();
        $user_agent = $_SERVER['HTTP_USER_AGENT'] ?? '';
        
        // Urƒçen√≠ akce podle URL
        $action = 'openai_request';
        if (strpos($url, '/threads/') !== false && strpos($url, '/messages') !== false) {
            $action = 'openai_create_message';
        } elseif (strpos($url, '/threads/') !== false && strpos($url, '/runs') !== false) {
            $action = 'openai_create_run';
        } elseif (strpos($url, '/threads') !== false && strpos($url, '/messages') === false) {
            $action = 'openai_create_thread';
        }
        
        // P≈ô√≠prava dat pro logov√°n√≠
        $request_json = is_string($request_data) ? $request_data : json_encode($request_data, JSON_UNESCAPED_UNICODE);
        $response_json = is_string($response_data) ? $response_data : json_encode($response_data, JSON_UNESCAPED_UNICODE);
        
        // Zkr√°cen√≠ p≈ô√≠li≈° dlouh√Ωch dat pro datab√°zi
        if (strlen($request_json) > 65000) {
            $request_json = substr($request_json, 0, 65000) . '... [zkr√°ceno]';
        }
        if (strlen($response_json) > 65000) {
            $response_json = substr($response_json, 0, 65000) . '... [zkr√°ceno]';
        }
        
        // Vlo≈æen√≠ do datab√°ze
        $sql = "INSERT INTO dotacni_kalkulator_logy 
                (zadost_id, akce, popis, ip_adresa, user_agent, openai_request, openai_response, openai_thread_id, openai_run_id, openai_status, openai_duration) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        
        $stmt = $db_connection->prepare($sql);
        $stmt->execute([
            $current_zadost_id,
            $action,
            "OpenAI API call: $url",
            $ip_address,
            $user_agent,
            $request_json,
            $response_json,
            $thread_id,
            $run_id,
            $status,
            $duration
        ]);
        
        error_log("üóÉÔ∏è OpenAI komunikace zalogov√°na: $action");
        
    } catch (Exception $e) {
        error_log("Chyba p≈ôi logov√°n√≠ OpenAI komunikace: " . $e->getMessage());
    }
}

// Funkce pro komunikaci s OpenAI API
function callOpenAI($url, $data, $api_key) {
    $start_time = microtime(true);
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json',
        'Authorization: Bearer ' . $api_key,
        'OpenAI-Beta: assistants=v2'
    ]);
    curl_setopt($ch, CURLOPT_TIMEOUT, 60);
    
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $duration = (microtime(true) - $start_time) * 1000; // v milisekund√°ch
    
    curl_close($ch);
    
    if ($response === false) {
        $error_data = ['error' => 'cURL error', 'code' => $http_code];
        logOpenAIRequest($url, $data, $error_data, null, null, 'error', $duration);
        throw new Exception("cURL error occurred");
    }
    
    $decoded_response = json_decode($response, true);
    
    if ($http_code !== 200) {
        logOpenAIRequest($url, $data, $decoded_response, null, null, 'error', $duration);
        throw new Exception("OpenAI API error: HTTP $http_code - $response");
    }
    
    // √öspƒõ≈°n√© logov√°n√≠
    $thread_id = $decoded_response['id'] ?? null;
    $run_id = $decoded_response['id'] ?? null;
    logOpenAIRequest($url, $data, $decoded_response, $thread_id, $run_id, 'success', $duration);
    
    return $decoded_response;
}

// Funkce pro GET request na OpenAI API
function getOpenAI($url, $api_key) {
    $start_time = microtime(true);
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Authorization: Bearer ' . $api_key,
        'OpenAI-Beta: assistants=v2'
    ]);
    curl_setopt($ch, CURLOPT_TIMEOUT, 60);
    
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $duration = (microtime(true) - $start_time) * 1000; // v milisekund√°ch
    
    curl_close($ch);
    
    if ($response === false) {
        $error_data = ['error' => 'cURL error', 'code' => $http_code];
        logOpenAIRequest($url, 'GET', $error_data, null, null, 'error', $duration);
        throw new Exception("cURL error occurred");
    }
    
    $decoded_response = json_decode($response, true);
    
    if ($http_code !== 200) {
        logOpenAIRequest($url, 'GET', $decoded_response, null, null, 'error', $duration);
        throw new Exception("OpenAI API error: HTTP $http_code - $response");
    }
    
    // √öspƒõ≈°n√© logov√°n√≠
    $thread_id = null;
    $run_id = null;
    
    // Extrakce ID z URL pro lep≈°√≠ logov√°n√≠
    if (preg_match('/\/threads\/([^\/]+)/', $url, $matches)) {
        $thread_id = $matches[1];
    }
    if (preg_match('/\/runs\/([^\/]+)/', $url, $matches)) {
        $run_id = $matches[1];
    }
    
    logOpenAIRequest($url, 'GET', $decoded_response, $thread_id, $run_id, 'success', $duration);
    
    return $decoded_response;
}

// Funkce pro ƒçek√°n√≠ na dokonƒçen√≠ bƒõhu
function waitForRunCompletion($thread_id, $run_id, $api_key) {
    $max_wait_time = 180; // 3 minuty
    $start_time = time();
    
    while (time() - $start_time < $max_wait_time) {
        $run_status = getOpenAI("https://api.openai.com/v1/threads/$thread_id/runs/$run_id", $api_key);
        
        if ($run_status['status'] === 'completed') {
            return $run_status;
        }
        
        if (in_array($run_status['status'], ['failed', 'cancelled', 'expired'])) {
            throw new Exception("OpenAI run failed with status: " . $run_status['status']);
        }
        
        sleep(2);
    }
    
    throw new Exception("Vypr≈°el ƒçasov√Ω limit pro zpracov√°n√≠ odpovƒõdi asistenta");
}

// Funkce pro zpracov√°n√≠ formul√°≈ôov√Ωch dat s asistentem
function processWithAssistant($form_data, $api_key, $assistant_id) {
    global $current_zadost_id;
    
    $process_start_time = microtime(true);
    
    try {
        // Logov√°n√≠ zaƒç√°tku procesu
        if ($current_zadost_id) {
            logOpenAIRequest('process_start', $form_data, ['status' => 'starting'], null, null, 'info', null);
        }
        
        // 1. Vytvo≈ôen√≠ nov√©ho vl√°kna
        $thread = callOpenAI('https://api.openai.com/v1/threads', [], $api_key);
        error_log("Vytvo≈ôeno nov√© vl√°kno s ID: " . $thread['id']);

        // 2. P≈ôid√°n√≠ zpr√°vy do vl√°kna
        $message_data = [
            'role' => 'user',
            'content' => json_encode($form_data)
        ];

        callOpenAI("https://api.openai.com/v1/threads/{$thread['id']}/messages", $message_data, $api_key);
        error_log("Zpr√°va s daty formul√°≈ôe byla p≈ôid√°na do vl√°kna");

        // 3. Spu≈°tƒõn√≠ asistenta
        $run_data = ['assistant_id' => $assistant_id];
        $run = callOpenAI("https://api.openai.com/v1/threads/{$thread['id']}/runs", $run_data, $api_key);
        error_log("Spu≈°tƒõn asistent s ID: " . $run['id']);

        // 4. ƒåek√°n√≠ na dokonƒçen√≠
        $run_status = waitForRunCompletion($thread['id'], $run['id'], $api_key);

        if ($run_status['status'] === 'completed') {
            // 5. Z√≠sk√°n√≠ zpr√°v z vl√°kna
            $messages = getOpenAI("https://api.openai.com/v1/threads/{$thread['id']}/messages", $api_key);

            foreach ($messages['data'] as $message) {
                if ($message['role'] === 'assistant') {
                    $raw_text = $message['content'][0]['text']['value'];
                    error_log("Z√≠sk√°na odpovƒõƒè od asistenta");

                    // Parsov√°n√≠ JSON z odpovƒõdi
                    $parsed_data = parseAssistantResponse($raw_text);
                    
                    // Logov√°n√≠ √∫spƒõ≈°n√©ho dokonƒçen√≠
                    $total_duration = (microtime(true) - $process_start_time) * 1000;
                    if ($current_zadost_id) {
                        logOpenAIRequest('process_complete', $form_data, $parsed_data, $thread['id'], $run['id'], 'success', $total_duration);
                    }

                    return $parsed_data;
                }
            }

            throw new Exception("Nenalezena odpovƒõƒè asistenta");
        } else {
            throw new Exception("Asistent neskonƒçil √∫spƒõ≈°nƒõ. Status: " . $run_status['status']);
        }

    } catch (Exception $e) {
        error_log("Chyba p≈ôi komunikaci s asistentem: " . $e->getMessage());
        
        // Logov√°n√≠ chyby
        $total_duration = (microtime(true) - $process_start_time) * 1000;
        if ($current_zadost_id) {
            logOpenAIRequest('process_error', $form_data, ['error' => $e->getMessage()], null, null, 'error', $total_duration);
        }
        
        throw new Exception("Chyba p≈ôi komunikaci s asistentem: " . $e->getMessage());
    }
}

// Funkce pro parsov√°n√≠ odpovƒõdi asistenta
function parseAssistantResponse($raw_text) {
    // Pokus 1: P≈ô√≠m√Ω JSON parsing
    $parsed_data = json_decode($raw_text, true);
    if ($parsed_data !== null) {
        error_log("‚úÖ JSON parsov√°n p≈ô√≠mo");
        return validateAndFixResponse($parsed_data);
    }

    // Pokus 2: Extrakce z markdown code block
    if (preg_match('/```(?:json)?\s*(.*?)\s*```/s', $raw_text, $matches)) {
        $parsed_data = json_decode(trim($matches[1]), true);
        if ($parsed_data !== null) {
            error_log("‚úÖ JSON extrahov√°ny z markdown bloku");
            return validateAndFixResponse($parsed_data);
        }
    }

    // Pokus 3: Hled√°n√≠ JSON objektu v textu
    $json_start = strpos($raw_text, '{');
    $json_end = strrpos($raw_text, '}');

    if ($json_start !== false && $json_end !== false && $json_end > $json_start) {
        $json_string = substr($raw_text, $json_start, $json_end - $json_start + 1);
        $parsed_data = json_decode($json_string, true);
        if ($parsed_data !== null) {
            error_log("‚úÖ JSON nalezen a parsov√°n z textu");
            return validateAndFixResponse($parsed_data);
        }
    }

    throw new Exception("Nelze parsovat JSON z odpovƒõdi. P≈Øvodn√≠ text: " . $raw_text);
}

// Funkce pro validaci a opravu odpovƒõdi
function validateAndFixResponse($data) {
    if (!is_array($data)) {
        throw new Exception('Parsovan√° data nejsou validn√≠ objekt');
    }

    // Validace po≈æadovan√Ωch pol√≠
    $required_fields = ['intro_text', 'doporuƒçene_dotace', 'celkov√°_dotace'];

    foreach ($required_fields as $field) {
        if (!isset($data[$field])) {
            error_log("‚ö†Ô∏è Chyb√≠ povinn√© pole: $field");
            // P≈ôid√°me v√Ωchoz√≠ hodnoty
            switch ($field) {
                case 'intro_text':
                    $data[$field] = "V√Ωsledky dotaƒçn√≠ho kalkul√°toru";
                    break;
                case 'doporuƒçene_dotace':
                    $data[$field] = [];
                    break;
                case 'celkov√°_dotace':
                    $data[$field] = "0 Kƒç";
                    break;
            }
        }
    }

    error_log("‚úÖ √öspƒõ≈°nƒõ zpracov√°na odpovƒõƒè asistenta: " . json_encode($data));
    return $data;
}

// Funkce pro z√≠sk√°n√≠ IP adresy klienta
function getClientIP() {
    $ip_fields = ['HTTP_CF_CONNECTING_IP', 'HTTP_X_FORWARDED_FOR', 'HTTP_X_FORWARDED', 
                 'HTTP_X_CLUSTER_CLIENT_IP', 'HTTP_FORWARDED_FOR', 'HTTP_FORWARDED', 'REMOTE_ADDR'];
    
    foreach ($ip_fields as $field) {
        if (!empty($_SERVER[$field])) {
            $ip = $_SERVER[$field];
            if (strpos($ip, ',') !== false) {
                $ip = trim(explode(',', $ip)[0]);
            }
            if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) {
                return $ip;
            }
        }
    }
    
    return $_SERVER['REMOTE_ADDR'] ?? 'unknown';
}

// Validace vstupn√≠ch dat
function validateFormData($data) {
    if (!$data) {
        throw new Exception('Nebyla poskytnuta ≈æ√°dn√° data');
    }

    // Kontrola povinn√Ωch pol√≠
    $required_fields = ['typ_nemovitosti', 'rok_vystavby', 'opatreni', 'lokalita', 'kontakt'];

    foreach ($required_fields as $field) {
        if (!isset($data[$field])) {
            throw new Exception("Chyb√≠ povinn√© pole: $field");
        }
    }

    // Kontrola typu nemovitosti
    if (empty($data['typ_nemovitosti'])) {
        throw new Exception('Mus√≠ b√Ωt vybr√°n typ nemovitosti');
    }

    // Kontrola roku v√Ωstavby
    if (empty($data['rok_vystavby'])) {
        throw new Exception('Mus√≠ b√Ωt vybr√°n rok v√Ωstavby');
    }

    // Kontrola opat≈ôen√≠
    if (!is_array($data['opatreni'])) {
        throw new Exception('Pole "opatreni" mus√≠ b√Ωt seznam');
    }

    if (count($data['opatreni']) === 0) {
        throw new Exception('Mus√≠ b√Ωt vybr√°no alespo≈à jedno opat≈ôen√≠');
    }

    // Kontrola lokality
    if (!is_array($data['lokalita'])) {
        throw new Exception('Lokalita mus√≠ b√Ωt objekt s adresou, mƒõstem a PSƒå');
    }

    $locality_fields = ['adresa', 'mesto', 'psc'];
    foreach ($locality_fields as $field) {
        if (!isset($data['lokalita'][$field]) || empty(trim($data['lokalita'][$field]))) {
            throw new Exception("Chyb√≠ nebo je pr√°zdn√© pole lokality: $field");
        }
    }

    // Kontrola kontaktn√≠ch √∫daj≈Ø
    if (!is_array($data['kontakt'])) {
        throw new Exception('Kontaktn√≠ √∫daje mus√≠ b√Ωt objekt');
    }

    $contact_fields = ['jmeno', 'email'];
    foreach ($contact_fields as $field) {
        if (!isset($data['kontakt'][$field]) || empty(trim($data['kontakt'][$field]))) {
            throw new Exception("Chyb√≠ nebo je pr√°zdn√© kontaktn√≠ pole: $field");
        }
    }

    // Kontrola e-mailu
    if (!filter_var($data['kontakt']['email'], FILTER_VALIDATE_EMAIL)) {
        throw new Exception('Neplatn√Ω form√°t e-mailov√© adresy');
    }

    // Kontrola souhlasu
    if (!isset($data['kontakt']['souhlas']) || $data['kontakt']['souhlas'] !== true) {
        throw new Exception('Mus√≠ b√Ωt udƒõlen souhlas se zpracov√°n√≠m osobn√≠ch √∫daj≈Ø');
    }

    // Kontrola soci√°ln√≠ situace (voliteln√©, ale pokud existuje, mus√≠ b√Ωt pole)
    if (isset($data['socialni_situace']) && !is_array($data['socialni_situace'])) {
        throw new Exception('Soci√°ln√≠ situace mus√≠ b√Ωt seznam hodnot');
    }

    return true;
}

// Hlavn√≠ zpracov√°n√≠
try {
    // Z√≠sk√°n√≠ dat z POST requestu
    $input = file_get_contents('php://input');
    $form_data = json_decode($input, true);

    if (!$form_data) {
        throw new Exception('Neplatn√© JSON data');
    }

    // Validace dat
    validateFormData($form_data);

    // Ulo≈æen√≠ dat do datab√°ze
    $zadost_id = $db_handler->storeFormData($form_data);
    $current_zadost_id = $zadost_id; // Nastaven√≠ pro logov√°n√≠
    
    // Zpracov√°n√≠ dat pomoc√≠ OpenAI asistenta
    $result = processWithAssistant($form_data, $openai_api_key, $assistant_id);

    // Aktualizace celkov√© dotace v datab√°zi
    $db_handler->updateTotalDotace($zadost_id, $result['celkov√°_dotace'] ?? '0 Kƒç');

    // √öspƒõ≈°n√° odpovƒõƒè
    http_response_code(200);
    echo json_encode([
        'success' => true,
        'data' => $result
    ]);

} catch (Exception $e) {
    error_log('Chyba v store-form.php: ' . $e->getMessage());
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'error' => $e->getMessage()
    ]);
}
?>